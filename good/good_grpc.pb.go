// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.11
// source: good.proto

package good

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Good_CreateProducts_FullMethodName       = "/good.Good/CreateProducts"
	Good_CreateSpecifications_FullMethodName = "/good.Good/CreateSpecifications"
	Good_SpecificationDetails_FullMethodName = "/good.Good/SpecificationDetails"
	Good_Sku_FullMethodName                  = "/good.Good/Sku"
)

// GoodClient is the client API for Good service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoodClient interface {
	// 添加商品
	CreateProducts(ctx context.Context, in *CreateProductsRequest, opts ...grpc.CallOption) (*Data, error)
	// 添加规格
	CreateSpecifications(ctx context.Context, in *CreateSpecificationsRequest, opts ...grpc.CallOption) (*Data, error)
	// 添加规格详情
	SpecificationDetails(ctx context.Context, in *SpecificationDetailsRequest, opts ...grpc.CallOption) (*Data, error)
	// 添加sku
	Sku(ctx context.Context, in *SkuRequest, opts ...grpc.CallOption) (*Data, error)
}

type goodClient struct {
	cc grpc.ClientConnInterface
}

func NewGoodClient(cc grpc.ClientConnInterface) GoodClient {
	return &goodClient{cc}
}

func (c *goodClient) CreateProducts(ctx context.Context, in *CreateProductsRequest, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, Good_CreateProducts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodClient) CreateSpecifications(ctx context.Context, in *CreateSpecificationsRequest, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, Good_CreateSpecifications_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodClient) SpecificationDetails(ctx context.Context, in *SpecificationDetailsRequest, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, Good_SpecificationDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodClient) Sku(ctx context.Context, in *SkuRequest, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, Good_Sku_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodServer is the server API for Good service.
// All implementations must embed UnimplementedGoodServer
// for forward compatibility
type GoodServer interface {
	// 添加商品
	CreateProducts(context.Context, *CreateProductsRequest) (*Data, error)
	// 添加规格
	CreateSpecifications(context.Context, *CreateSpecificationsRequest) (*Data, error)
	// 添加规格详情
	SpecificationDetails(context.Context, *SpecificationDetailsRequest) (*Data, error)
	// 添加sku
	Sku(context.Context, *SkuRequest) (*Data, error)
	mustEmbedUnimplementedGoodServer()
}

// UnimplementedGoodServer must be embedded to have forward compatible implementations.
type UnimplementedGoodServer struct {
}

func (UnimplementedGoodServer) CreateProducts(context.Context, *CreateProductsRequest) (*Data, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProducts not implemented")
}
func (UnimplementedGoodServer) CreateSpecifications(context.Context, *CreateSpecificationsRequest) (*Data, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpecifications not implemented")
}
func (UnimplementedGoodServer) SpecificationDetails(context.Context, *SpecificationDetailsRequest) (*Data, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpecificationDetails not implemented")
}
func (UnimplementedGoodServer) Sku(context.Context, *SkuRequest) (*Data, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sku not implemented")
}
func (UnimplementedGoodServer) mustEmbedUnimplementedGoodServer() {}

// UnsafeGoodServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoodServer will
// result in compilation errors.
type UnsafeGoodServer interface {
	mustEmbedUnimplementedGoodServer()
}

func RegisterGoodServer(s grpc.ServiceRegistrar, srv GoodServer) {
	s.RegisterService(&Good_ServiceDesc, srv)
}

func _Good_CreateProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodServer).CreateProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Good_CreateProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodServer).CreateProducts(ctx, req.(*CreateProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Good_CreateSpecifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpecificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodServer).CreateSpecifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Good_CreateSpecifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodServer).CreateSpecifications(ctx, req.(*CreateSpecificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Good_SpecificationDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpecificationDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodServer).SpecificationDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Good_SpecificationDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodServer).SpecificationDetails(ctx, req.(*SpecificationDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Good_Sku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodServer).Sku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Good_Sku_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodServer).Sku(ctx, req.(*SkuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Good_ServiceDesc is the grpc.ServiceDesc for Good service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Good_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.Good",
	HandlerType: (*GoodServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProducts",
			Handler:    _Good_CreateProducts_Handler,
		},
		{
			MethodName: "CreateSpecifications",
			Handler:    _Good_CreateSpecifications_Handler,
		},
		{
			MethodName: "SpecificationDetails",
			Handler:    _Good_SpecificationDetails_Handler,
		},
		{
			MethodName: "Sku",
			Handler:    _Good_Sku_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "good.proto",
}
